{"version":3,"sources":["index.js"],"names":["tf","require","weights","process","names","App","state","model","preview","predictions","onDrop","accepted","rejected","links","setState","cropToCanvas","image","canvas","ctx","naturalWidth","naturalHeight","clearRect","width","height","fillStyle","fillRect","ratio","Math","min","newWidth","round","newHeight","drawImage","onImageChange","e","c","document","getElementById","getContext","target","input","resizeBilinear","browser","fromPixels","div","expandDims","before","performance","now","executeAsync","then","res","after","createElement","innerHTML","body","appendChild","font","textBaseline","i","boxes","scores","classes","valid_detections","console","log","dataSync","slice","x1","y1","x2","y2","klass","score","toFixed","strokeStyle","lineWidth","strokeRect","textWidth","measureText","textHeight","parseInt","fillText","loadGraphModel","className","this","accept","multiple","alt","onLoad","src","id","React","Component","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.01059eae.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MagicDropzone from 'react-magic-dropzone';\n\nimport './styles.css';\nconst tf = require('@tensorflow/tfjs');\n\nconst weights = `${process.env.PUBLIC_URL}/web_model/model.json`;\n\nconst names = [\n  '1',\n  '12',\n  '17',\n  '18',\n  '19',\n  '25',\n  '26',\n  '3',\n  '34',\n  '5',\n  '8',\n  '9',\n  'Q',\n  'a',\n  'an',\n  'b',\n  'c',\n  'd',\n  'e',\n  'er',\n  'f',\n  'g',\n  'h',\n  'he',\n  'i',\n  'in',\n  'j',\n  'k',\n  'l',\n  'm',\n  'n',\n  'o',\n  'p',\n  'q',\n  'qu',\n  'r',\n  's',\n  't',\n  't-',\n  'th',\n  'u',\n  'v',\n  'w',\n  'wild',\n  'x',\n  'y',\n  'z',\n];\n\nconst [modelWeight, modelHeight] = [320, 320];\n\nclass App extends React.Component {\n  state = {\n    model: null,\n    preview: '',\n    predictions: [],\n  };\n\n  componentDidMount() {\n    tf.loadGraphModel(weights).then((model) => {\n      this.setState({\n        model: model,\n      });\n    });\n  }\n\n  onDrop = (accepted, rejected, links) => {\n    this.setState({ preview: accepted[0].preview || links[0] });\n  };\n\n  cropToCanvas = (image, canvas, ctx) => {\n    const naturalWidth = image.naturalWidth;\n    const naturalHeight = image.naturalHeight;\n\n    // canvas.width = image.width;\n    // canvas.height = image.height;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const ratio = Math.min(\n      canvas.width / image.naturalWidth,\n      canvas.height / image.naturalHeight\n    );\n    const newWidth = Math.round(naturalWidth * ratio);\n    const newHeight = Math.round(naturalHeight * ratio);\n    ctx.drawImage(\n      image,\n      0,\n      0,\n      naturalWidth,\n      naturalHeight,\n      (canvas.width - newWidth) / 2,\n      (canvas.height - newHeight) / 2,\n      newWidth,\n      newHeight\n    );\n  };\n\n  onImageChange = (e) => {\n    const c = document.getElementById('canvas');\n    const ctx = c.getContext('2d');\n    this.cropToCanvas(e.target, c, ctx);\n\n    const input = tf.image\n      .resizeBilinear(tf.browser.fromPixels(c), [modelWeight, modelHeight])\n      .div(255.0)\n      .expandDims(0);\n\n    const before = performance.now();\n    this.state.model.executeAsync(input).then((res) => {\n      const after = performance.now();\n      const div = document.createElement('div');\n      div.innerHTML = `Inference took: ${after - before} ms`;\n      document.body.appendChild(div);\n      // Font options.\n      const font = '16px sans-serif';\n      ctx.font = font;\n      ctx.textBaseline = 'top';\n\n      const [boxes, scores, classes, valid_detections] = res;\n      console.log({\n        boxes: boxes.dataSync(),\n        scores: scores.dataSync(),\n        classes: classes.dataSync(),\n        valid_detections: valid_detections.dataSync(),\n      });\n      var i;\n      for (i = 0; i < valid_detections.dataSync()[0]; ++i) {\n        let [x1, y1, x2, y2] = boxes.dataSync().slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        x2 *= c.width;\n        y1 *= c.height;\n        y2 *= c.height;\n        const width = x2 - x1;\n        const height = y2 - y1;\n        const klass = names[classes.dataSync()[i]];\n        const score = scores.dataSync()[i].toFixed(2);\n\n        // Draw the bounding box.\n        ctx.strokeStyle = '#00FFFF';\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x1, y1, width, height);\n\n        // Draw the label background.\n        ctx.fillStyle = '#00FFFF';\n        const textWidth = ctx.measureText(klass + ':' + score).width;\n        const textHeight = parseInt(font, 10); // base 10\n        ctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\n      }\n      for (i = 0; i < valid_detections.dataSync()[0]; ++i) {\n        let [x1, y1, ,] = boxes.dataSync().slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        y1 *= c.height;\n        const klass = names[classes.dataSync()[i]];\n        const score = scores.dataSync()[i].toFixed(2);\n\n        // Draw the text last to ensure it's on top.\n        ctx.fillStyle = '#000000';\n        ctx.fillText(klass + ':' + score, x1, y1);\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Dropzone-page\">\n        {this.state.model ? (\n          <MagicDropzone\n            className=\"Dropzone\"\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n            multiple={false}\n            onDrop={this.onDrop}\n          >\n            {this.state.preview ? (\n              <img\n                alt=\"upload preview\"\n                onLoad={this.onImageChange}\n                className=\"Dropzone-img\"\n                src={this.state.preview}\n              />\n            ) : (\n              'Choose or drop a file.'\n            )}\n            <canvas id=\"canvas\" width=\"640\" height=\"640\" />\n          </MagicDropzone>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}