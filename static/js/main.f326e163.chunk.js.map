{"version":3,"sources":["index.js"],"names":["tf","require","weights","process","names","App","state","model","preview","predictions","onDrop","accepted","rejected","links","setState","cropToCanvas","image","canvas","ctx","naturalWidth","naturalHeight","clearRect","width","height","fillStyle","fillRect","ratio","Math","min","newWidth","round","newHeight","drawImage","onImageChange","e","c","document","getElementById","getContext","target","input","resizeBilinear","browser","fromPixels","div","expandDims","before","performance","now","executeAsync","then","res","after","createElement","innerHTML","body","appendChild","font","textBaseline","i","boxes","scores","classes","valid_detections","dataSync","slice","x1","y1","x2","y2","klass","score","toFixed","strokeStyle","lineWidth","strokeRect","textWidth","measureText","textHeight","parseInt","fillText","loadGraphModel","className","this","accept","multiple","alt","onLoad","src","id","React","Component","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.f326e163.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MagicDropzone from 'react-magic-dropzone';\n\nimport './styles.css';\nconst tf = require('@tensorflow/tfjs');\n\nconst weights = `${process.env.PUBLIC_URL}/web_model/model.json`;\n\nconst names = [\n  'person',\n  'bicycle',\n  'car',\n  'motorcycle',\n  'airplane',\n  'bus',\n  'train',\n  'truck',\n  'boat',\n  'traffic light',\n  'fire hydrant',\n  'stop sign',\n  'parking meter',\n  'bench',\n  'bird',\n  'cat',\n  'dog',\n  'horse',\n  'sheep',\n  'cow',\n  'elephant',\n  'bear',\n  'zebra',\n  'giraffe',\n  'backpack',\n  'umbrella',\n  'handbag',\n  'tie',\n  'suitcase',\n  'frisbee',\n  'skis',\n  'snowboard',\n  'sports ball',\n  'kite',\n  'baseball bat',\n  'baseball glove',\n  'skateboard',\n  'surfboard',\n  'tennis racket',\n  'bottle',\n  'wine glass',\n  'cup',\n  'fork',\n  'knife',\n  'spoon',\n  'bowl',\n  'banana',\n  'apple',\n  'sandwich',\n  'orange',\n  'broccoli',\n  'carrot',\n  'hot dog',\n  'pizza',\n  'donut',\n  'cake',\n  'chair',\n  'couch',\n  'potted plant',\n  'bed',\n  'dining table',\n  'toilet',\n  'tv',\n  'laptop',\n  'mouse',\n  'remote',\n  'keyboard',\n  'cell phone',\n  'microwave',\n  'oven',\n  'toaster',\n  'sink',\n  'refrigerator',\n  'book',\n  'clock',\n  'vase',\n  'scissors',\n  'teddy bear',\n  'hair drier',\n  'toothbrush',\n];\n\nconst [modelWeight, modelHeight] = [320, 320];\n\nclass App extends React.Component {\n  state = {\n    model: null,\n    preview: '',\n    predictions: [],\n  };\n\n  componentDidMount() {\n    tf.loadGraphModel(weights).then((model) => {\n      this.setState({\n        model: model,\n      });\n    });\n  }\n\n  onDrop = (accepted, rejected, links) => {\n    this.setState({ preview: accepted[0].preview || links[0] });\n  };\n\n  cropToCanvas = (image, canvas, ctx) => {\n    const naturalWidth = image.naturalWidth;\n    const naturalHeight = image.naturalHeight;\n\n    // canvas.width = image.width;\n    // canvas.height = image.height;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const ratio = Math.min(\n      canvas.width / image.naturalWidth,\n      canvas.height / image.naturalHeight\n    );\n    const newWidth = Math.round(naturalWidth * ratio);\n    const newHeight = Math.round(naturalHeight * ratio);\n    ctx.drawImage(\n      image,\n      0,\n      0,\n      naturalWidth,\n      naturalHeight,\n      (canvas.width - newWidth) / 2,\n      (canvas.height - newHeight) / 2,\n      newWidth,\n      newHeight\n    );\n  };\n\n  onImageChange = (e) => {\n    const c = document.getElementById('canvas');\n    const ctx = c.getContext('2d');\n    this.cropToCanvas(e.target, c, ctx);\n\n    const input = tf.image\n      .resizeBilinear(tf.browser.fromPixels(c), [modelWeight, modelHeight])\n      .div(255.0)\n      .expandDims(0);\n\n    const before = performance.now();\n    this.state.model.executeAsync(input).then((res) => {\n      const after = performance.now();\n      const div = document.createElement('div');\n      div.innerHTML = `Inference took: ${after - before} ms`;\n      document.body.appendChild(div);\n      // Font options.\n      const font = '16px sans-serif';\n      ctx.font = font;\n      ctx.textBaseline = 'top';\n\n      const [boxes, scores, classes, valid_detections] = res;\n      var i;\n      for (i = 0; i < valid_detections.dataSync()[0]; ++i) {\n        let [x1, y1, x2, y2] = boxes.dataSync().slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        x2 *= c.width;\n        y1 *= c.height;\n        y2 *= c.height;\n        const width = x2 - x1;\n        const height = y2 - y1;\n        const klass = names[classes.dataSync()[i]];\n        const score = scores.dataSync()[i].toFixed(2);\n\n        // Draw the bounding box.\n        ctx.strokeStyle = '#00FFFF';\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x1, y1, width, height);\n\n        // Draw the label background.\n        ctx.fillStyle = '#00FFFF';\n        const textWidth = ctx.measureText(klass + ':' + score).width;\n        const textHeight = parseInt(font, 10); // base 10\n        ctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\n      }\n      for (i = 0; i < valid_detections.dataSync()[0]; ++i) {\n        let [x1, y1, ,] = boxes.dataSync().slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        y1 *= c.height;\n        const klass = names[classes.dataSync()[i]];\n        const score = scores.dataSync()[i].toFixed(2);\n\n        // Draw the text last to ensure it's on top.\n        ctx.fillStyle = '#000000';\n        ctx.fillText(klass + ':' + score, x1, y1);\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Dropzone-page\">\n        {this.state.model ? (\n          <MagicDropzone\n            className=\"Dropzone\"\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n            multiple={false}\n            onDrop={this.onDrop}\n          >\n            {this.state.preview ? (\n              <img\n                alt=\"upload preview\"\n                onLoad={this.onImageChange}\n                className=\"Dropzone-img\"\n                src={this.state.preview}\n              />\n            ) : (\n              'Choose or drop a file.'\n            )}\n            <canvas id=\"canvas\" width=\"640\" height=\"640\" />\n          </MagicDropzone>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}