{"version":3,"sources":["index.js"],"names":["tf","require","weights","process","names","App","state","model","preview","predictions","onDrop","accepted","rejected","links","setState","cropToCanvas","image","canvas","ctx","naturalWidth","naturalHeight","clearRect","width","height","fillStyle","fillRect","ratio","Math","min","newWidth","round","newHeight","drawImage","onImageChange","e","c","document","getElementById","getContext","target","input","resizeBilinear","browser","fromPixels","div","expandDims","before","performance","now","executeAsync","then","res","after","createElement","innerHTML","body","appendChild","font","textBaseline","map","tensor","dataSync","boxes","scores","classes","validDetectionCount","slice","dispose","indices","tidy","nonMaxSuppression","tensor2d","length","i","x1","y1","x2","y2","klass","score","toFixed","strokeStyle","lineWidth","strokeRect","textWidth","measureText","textHeight","parseInt","fillText","loadGraphModel","console","log","className","this","artifacts","weightData","byteLength","accept","multiple","alt","onLoad","src","id","React","Component","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.9d1b10ff.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport MagicDropzone from 'react-magic-dropzone';\n\nimport './styles.css';\nconst tf = require('@tensorflow/tfjs');\n\nconst weights = `${process.env.PUBLIC_URL}/web_model/model.json`;\n\nconst names = [\n  'c',\n  'c1',\n  'castle',\n  'f',\n  'f1',\n  'g',\n  'g1',\n  'g2',\n  'm',\n  'm1',\n  'm2',\n  'm3',\n  's',\n  's1',\n  's2',\n  'w',\n  'w1',\n];\n\nconst [modelWeight, modelHeight] = [320, 320];\n\nclass App extends React.Component {\n  state = {\n    model: null,\n    preview: '',\n    predictions: [],\n  };\n\n  componentDidMount() {\n    tf.loadGraphModel(weights).then((model) => {\n      console.log({ model });\n      this.setState({\n        model: model,\n      });\n    });\n  }\n\n  onDrop = (accepted, rejected, links) => {\n    this.setState({ preview: accepted[0].preview || links[0] });\n  };\n\n  cropToCanvas = (image, canvas, ctx) => {\n    const naturalWidth = image.naturalWidth;\n    const naturalHeight = image.naturalHeight;\n\n    // canvas.width = image.width;\n    // canvas.height = image.height;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = '#000000';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const ratio = Math.min(\n      canvas.width / image.naturalWidth,\n      canvas.height / image.naturalHeight\n    );\n    const newWidth = Math.round(naturalWidth * ratio);\n    const newHeight = Math.round(naturalHeight * ratio);\n    ctx.drawImage(\n      image,\n      0,\n      0,\n      naturalWidth,\n      naturalHeight,\n      (canvas.width - newWidth) / 2,\n      (canvas.height - newHeight) / 2,\n      newWidth,\n      newHeight\n    );\n  };\n\n  onImageChange = (e) => {\n    const c = document.getElementById('canvas');\n    const ctx = c.getContext('2d');\n    this.cropToCanvas(e.target, c, ctx);\n\n    const input = tf.image\n      .resizeBilinear(tf.browser.fromPixels(c), [modelWeight, modelHeight])\n      .div(255.0)\n      .expandDims(0);\n\n    const maxNumBoxes = 49;\n    const minScore = 0.5;\n\n    const before = performance.now();\n    this.state.model.executeAsync(input).then((res) => {\n      const after = performance.now();\n      const div = document.createElement('div');\n      div.innerHTML = `Inference took: ${after - before} ms`;\n      document.body.appendChild(div);\n      // Font options.\n      const font = '16px sans-serif';\n      ctx.font = font;\n      ctx.textBaseline = 'top';\n\n      let [boxes, scores, classes, [validDetectionCount]] = res.map((tensor) =>\n        tensor.dataSync()\n      );\n      boxes = boxes.slice(0, validDetectionCount * 4);\n      scores = scores.slice(0, validDetectionCount);\n      classes = classes.slice(0, validDetectionCount);\n\n      // clean the webgl tensors\n      input.dispose();\n      tf.dispose(res);\n\n      const indexTensor = tf.tidy(() =>\n        tf.image.nonMaxSuppression(\n          tf.tensor2d(boxes, [boxes.length / 4, 4]),\n          scores,\n          maxNumBoxes,\n          minScore,\n          minScore\n        )\n      );\n\n      const indices = indexTensor.dataSync();\n      for (let i of indices) {\n        let [x1, y1, x2, y2] = boxes.slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        x2 *= c.width;\n        y1 *= c.height;\n        y2 *= c.height;\n        const width = x2 - x1;\n        const height = y2 - y1;\n        const klass = names[classes[i]];\n        const score = scores[i].toFixed(2);\n\n        // Draw the bounding box.\n        ctx.strokeStyle = '#00FFFF';\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x1, y1, width, height);\n\n        // Draw the label background.\n        ctx.fillStyle = '#00FFFF';\n        const textWidth = ctx.measureText(klass + ':' + score).width;\n        const textHeight = parseInt(font, 10); // base 10\n        ctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\n      }\n      for (let i of indices) {\n        let [x1, y1, ,] = boxes.slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        y1 *= c.height;\n        const klass = names[classes[i]];\n        const score = scores[i].toFixed(2);\n\n        // Draw the text last to ensure it's on top.\n        ctx.fillStyle = '#000000';\n        ctx.fillText(klass + ':' + score, x1, y1);\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Dropzone-page\">\n        {this.state.model ? (\n          <>\n            <div>\n              {(\n                this.state.model.artifacts.weightData.byteLength /\n                1024 /\n                1024\n              ).toFixed(3)}{' '}\n              Mb\n            </div>\n            <MagicDropzone\n              className=\"Dropzone\"\n              accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n              multiple={false}\n              onDrop={this.onDrop}\n            >\n              {this.state.preview ? (\n                <img\n                  alt=\"upload preview\"\n                  onLoad={this.onImageChange}\n                  className=\"Dropzone-img\"\n                  src={this.state.preview}\n                />\n              ) : (\n                'Choose or drop a file.'\n              )}\n              <canvas id=\"canvas\" width=\"640\" height=\"640\" />\n            </MagicDropzone>\n          </>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}